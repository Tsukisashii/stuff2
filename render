local Players = game:GetService("Players")
safeCall(function() desc.Enabled = false end)
end


-- Lights
if desc:IsA("PointLight") or desc:IsA("SpotLight") or desc:IsA("SurfaceLight") then
safeCall(function() desc.Enabled = false end)
end


-- Sounds
if desc:IsA("Sound") then
safeCall(function() desc:Stop() end)
end


-- Shadows: turn off cast shadows for parts
if desc:IsA("BasePart") then
-- Save once per part (memory cost is small)
if not saved[desc] then
saved[desc] = {CastShadow = desc.CastShadow}
end
safeCall(function() desc.CastShadow = false end)
end


-- Decals / textures: set Transparency to 1 (hide) or remove update cost
if desc:IsA("Decal") or desc:IsA("Texture") then
if not saved[desc] then saved[desc] = {Transparency = desc.Transparency} end
safeCall(function() desc.Transparency = 1 end)
end


-- SurfaceAppearance and materials: lower quality by removing PBR maps
if desc:IsA("SurfaceAppearance") then
safeCall(function()
desc:Destroy()
end)
end


-- Meshes: remove special mesh textures if present
if desc:IsA("SpecialMesh") or desc:IsA("MeshPart") then
-- can't always change mesh; attempt to reduce detail by removing textures
-- note: changing MeshId may break assets; we prefer non-destructive options
-- just ensure LevelOfDetail isn't present; skip if risky
end
end
end


local function restoreVisuals(root)
-- Try to restore parts we saved earlier
for k,v in pairs(saved) do
if typeof(k) == "Instance" and k.Parent then
if v.CastShadow ~= nil then
safeCall(function() k.CastShadow = v.CastShadow end)
end
if v.Transparency ~= nil and k:IsA("Decal") or k:IsA("Texture") then
safeCall(function() k.Transparency = v.Transparency end)
end
end
end
-- restore lighting separately
restoreLighting()
end


function M.enable()
if M.enabled then return end
M.enabled = true
disable3DRendering()
reduceLighting()
stripVisuals(workspace)
stripVisuals(Players.LocalPlayer.Character or workspace)
-- Optionally disable GUI effects
safeCall(function()
StarterGui:SetCore("ResetButtonCallback", false)
end)
end


function M.disable()
if not M.enabled then return end
M.enabled = false
enable3DRendering()
restoreVisuals(workspace)
end


-- Auto-enable on script run. Toggle with keybind if you want.
M.enable()


-- Example keybind to toggle (press "P")
local UserInputService = game:GetService("UserInputService")
UserInputService.InputBegan:Connect(function(input, gameProcessed)
if gameProcessed then return end
if input.KeyCode == Enum.KeyCode.P then
if M.enabled then M.disable() else M.enable() end
end
end)


return M
